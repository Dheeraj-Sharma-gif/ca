#include <omp.h>
#include <stdio.h>
#include <stdlib.h>

#define NRA 62
#define NCA 15
#define NCB 7

int main(int argc, char *argv[])
{
    int tid, nthreads, i, j, k, chunk;
    double a[NRA][NCA], b[NCA][NCB], c[NRA][NCB];

    chunk = 10;

    #pragma omp parallel shared(a, b, c, nthreads, chunk) private(tid, i, j, k)
    {
        tid = omp_get_thread_num();
        if (tid == 0)
        {
            nthreads = omp_get_num_threads();
            printf("Starting matrix multiple example with %d threads\n", nthreads);
            printf("Initializing matrices...\n");
        }

        #pragma omp for schedule(static, chunk)
        for (i = 0; i < NRA; i++)
            for (j = 0; j < NCA; j++)
                a[i][j] = i + j;

        #pragma omp for schedule(static, chunk)
        for (i = 0; i < NCA; i++)
            for (j = 0; j < NCB; j++)
                b[i][j] = i * j;

        #pragma omp for schedule(static, chunk)
        for (i = 0; i < NRA; i++)
            for (j = 0; j < NCB; j++)
                c[i][j] = 0;

        printf("Thread %d starting matrix multiply...\n", tid);

        #pragma omp for schedule(static, chunk)
        for (i = 0; i < NRA; i++)
        {
            printf("Thread=%d did row=%d\n", tid, i);
            for (j = 0; j < NCB; j++)
                for (k = 0; k < NCA; k++)
                    c[i][j] += a[i][k] * b[k][j];
        }
    }

    printf("******************************************************\n");
    printf("Result Matrix:\n");

    for (i = 0; i < NRA; i++)
    {
        for (j = 0; j < NCB; j++)
            printf("%6.2f ", c[i][j]);
        printf("\n");
    }

    printf("******************************************************\n");
    printf("Done.\n");

    return 0;
}

#include <omp.h>
#include <stdio.h>

int a, b, i, tid;
float x;
#pragma omp threadprivate(a, x)

int main()
{
    omp_set_dynamic(0);

    printf("1st Parallel Region:\n");
    #pragma omp parallel private(b, tid)
    {
        tid = omp_get_thread_num();
        a = tid;
        b = tid;
        x = 1.1f * tid + 1.0f;
        printf("Thread %d: a,b,x= %d %d %f\n", tid, a, b, x);
    }

    printf("************************************\n");
    printf("Master thread doing serial work here\n");
    printf("************************************\n");

    printf("2nd Parallel Region:\n");
    #pragma omp parallel private(tid)
    {
        tid = omp_get_thread_num();
        printf("Thread %d: a,b,x= %d %d %f\n", tid, a, b, x);
    }

    return 0;
}

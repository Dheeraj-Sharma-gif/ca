#include <omp.h>
#include <stdio.h>
#include <stdlib.h>

#define N 50

int main(int argc, char *argv[])
{
    int i, nthreads, tid;
    float a[N], b[N], c[N], d[N];

    for (i = 0; i < N; i++) {
        a[i] = i * 1.5f;
        b[i] = i + 22.35f;
        c[i] = 0.0f;
        d[i] = 0.0f;
    }

    #pragma omp parallel shared(a, b, c, d, nthreads) private(i, tid)
    {
        tid = omp_get_thread_num();
        if (tid == 0) {
            nthreads = omp_get_num_threads();
            printf("Number of threads = %d\n", nthreads);
        }

        printf("Thread %d starting...\n", tid);

        #pragma omp sections nowait
        {
            #pragma omp section
            {
                printf("Thread %d doing section 1\n", tid);
                for (i = 0; i < N; i++) {
                    c[i] = a[i] + b[i];
                    printf("Thread %d: c[%d]= %f\n", tid, i, c[i]);
                }
            }

            #pragma omp section
            {
                printf("Thread %d doing section 2\n", tid);
                for (i = 0; i < N; i++) {
                    d[i] = a[i] * b[i];
                    printf("Thread %d: d[%d]= %f\n", tid, i, d[i]);
                }
            }
        }

        printf("Thread %d done.\n", tid);
    }

    return 0;
}

#include <omp.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[])
{
    int i, n;
    float a[1000], b[1000], sum;

    n = 1000;

    for (i = 0; i < n; i++)
        a[i] = b[i] = i * 1.0f;

    sum = 0.0f;

    #pragma omp parallel for reduction(+:sum)
    for (i = 0; i < n; i++)
        sum += a[i] * b[i];

    printf("Sum = %f\n", sum);

    return 0;
}

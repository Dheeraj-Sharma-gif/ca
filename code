#include <stdio.h>  
#include <stdlib.h>  
#include <omp.h>  

#define ARRAY_SIZE 25 

void bubble_sort(int arr[], int n)  
{  
    int i, j, temp;
    for (i = 0; i < n - 1; ++i)  
    {  
        for (j = 0; j < n - i - 1; ++j)  
        {  
            if (arr[j] > arr[j + 1])  
            { 
                temp = arr[j];  
                arr[j] = arr[j + 1];  
                arr[j + 1] = temp;  
            }  
        }  
    }  
}  

int main()  
{  
    int arr[ARRAY_SIZE]; 
    int i;

    #pragma omp parallel for 
    for (i = 0; i < ARRAY_SIZE; ++i)  
    {  
        arr[i] = rand() % 100; 
    }  

    printf("\nThe array elements are:\n"); 
    for (i = 0; i < ARRAY_SIZE; i++) 
        printf("%d  ", arr[i]); 

    #pragma omp parallel shared(arr)  
    { 
        #pragma omp single
        bubble_sort(arr, ARRAY_SIZE);  
    }  

    printf("\n\nSorted array:\n");  
    for (i = 0; i < ARRAY_SIZE; ++i)  
    {  
        printf("%d   ", arr[i]);  
    }  

    printf("\n");  
    return 0; 
}
-----------------------------------
#include <stdio.h>  
#include <omp.h>  

#define ARRAY_SIZE 100  
#define TARGET 42  

int binary_search(int arr[], int left, int right, int target)  
{  
    int mid;
    while (left <= right)  
    {  
        mid = left + (right - left) / 2;           
        if (arr[mid] == target) return mid;  
        if (arr[mid] < target)  
            left = mid + 1;  
        else  
            right = mid - 1; 
    }  
    return -1;  
}  

int main()  
{  
    int arr[ARRAY_SIZE];  
    int i, result = -1;  

    for (i = 0; i < ARRAY_SIZE; ++i)  
    {  
        arr[i] = i;  
    }  

    #pragma omp parallel shared(arr, result)  
    {  
        int tid = omp_get_thread_num();  
        int num_threads = omp_get_num_threads();  
        int chunk_size = ARRAY_SIZE / num_threads;  
        int left = tid * chunk_size;  
        int right = (tid == num_threads - 1) ? ARRAY_SIZE - 1 : (tid + 1) * chunk_size - 1;  
        int local_result = binary_search(arr, left, right, TARGET);  

        #pragma omp critical  
        {  
            if (local_result != -1 && result == -1)  
                result = local_result;  
        }  
    }  

    if (result != -1)  
        printf("Element %d found at index %d.\n", TARGET, result);  
    else  
        printf("Element %d not found in the array.\n", TARGET);  

    return 0;  
}
----------------------------------------------------------
#include <stdio.h> 
#include <omp.h> 
#define N 20 

int main() 
{ 
    int fib[N]; 
    int i;

    fib[0] = 0; 
    fib[1] = 1; 

   
    for (i = 2; i < N; i++) { 
        fib[i] = fib[i-1] + fib[i-2]; 
    } 

    printf("Fibonacci sequence (sequential):\n"); 
    for (i = 0; i < N; i++) { 
        printf("%d ", fib[i]); 
    } 
    printf("\n"); 

    fib[0] = 0; 
    fib[1] = 1; 

    for (i = 2; i < N; i++) { 
        fib[i] = fib[i-1] + fib[i-2]; 
    } 

    printf("Fibonacci sequence (recomputed, still sequential):\n"); 
    for (i = 0; i < N; i++) { 
        printf("%d ", fib[i]); 
    } 
    printf("\n"); 

    return 0; 
}
-------------------------------
#include <stdio.h>
#include <omp.h>

#define NUM_UNITS 2
#define NUM_INSTRUCTIONS 6

typedef struct {
    char type;
    int src1;
    int src2;
    int dest;
} Instruction;

typedef struct {
    char type;
    int op1;
    int op2;
    int result;
    int status;
} FunctionalUnit;

Instruction instructions[NUM_INSTRUCTIONS] = {
    {'A', 2, 3, 1},
    {'M', 4, 5, 2},
    {'A', 1, 2, 3},
    {'M', 3, 3, 4},
    {'A', 5, 4, 5},
    {'M', 2, 2, 6}
};

FunctionalUnit units[NUM_UNITS];

void execute_instruction(int unit_id, Instruction inst) {
    volatile int i;
    for (i = 0; i < 100000000; ++i);

    if (inst.type == 'A') {
        units[unit_id].result = inst.src1 + inst.src2;
    } else if (inst.type == 'M') {
        units[unit_id].result = inst.src1 * inst.src2;
    }
    units[unit_id].status = 0;
}

int main() {
    int i, j;

    for (i = 0; i < NUM_UNITS; ++i) {
        units[i].status = 0;
    }

    #pragma omp parallel for num_threads(NUM_INSTRUCTIONS)
    for (i = 0; i < NUM_INSTRUCTIONS; ++i) {
        int unit_id = -1;

        #pragma omp critical
        {
            for (j = 0; j < NUM_UNITS; ++j) {
                if (units[j].status == 0) {
                    unit_id = j;
                    units[j].status = 1;
                    break;
                }
            }
        }

        if (unit_id != -1) {
            execute_instruction(unit_id, instructions[i]);
            printf("Executed instruction %d: Result = %d\n", i + 1, units[unit_id].result);
        } else {
            printf("No free functional unit available for instruction %d\n", i + 1);
        }
    }

    return 0;
}
--------------------------------------
#include <omp.h>
#include <stdio.h>
#include <stdlib.h>

#define N 50

int main(int argc, char *argv[])
{
    int i, nthreads, tid;
    float a[N], b[N], c[N], d[N];

    for (i = 0; i < N; i++) {
        a[i] = i * 1.5f;
        b[i] = i + 22.35f;
        c[i] = 0.0f;
        d[i] = 0.0f;
    }

    #pragma omp parallel shared(a, b, c, d, nthreads) private(i, tid)
    {
        tid = omp_get_thread_num();
        if (tid == 0) {
            nthreads = omp_get_num_threads();
            printf("Number of threads = %d\n", nthreads);
        }

        printf("Thread %d starting...\n", tid);

        #pragma omp sections nowait
        {
            #pragma omp section
            {
                printf("Thread %d doing section 1\n", tid);
                for (i = 0; i < N; i++) {
                    c[i] = a[i] + b[i];
                    printf("Thread %d: c[%d]= %f\n", tid, i, c[i]);
                }
            }

            #pragma omp section
            {
                printf("Thread %d doing section 2\n", tid);
                for (i = 0; i < N; i++) {
                    d[i] = a[i] * b[i];
                    printf("Thread %d: d[%d]= %f\n", tid, i, d[i]);
                }
            }
        }

        printf("Thread %d done.\n", tid);
    }

    return 0;
}
-----------------------------------------------------------------------
#include <omp.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[])
{
    int i, n;
    float a[1000], b[1000], sum;

    n = 1000;

    for (i = 0; i < n; i++)
        a[i] = b[i] = i * 1.0f;

    sum = 0.0f;

    #pragma omp parallel for reduction(+:sum)
    for (i = 0; i < n; i++)
        sum += a[i] * b[i];

    printf("Sum = %f\n", sum);

    return 0;
}
------------------------------------------------
#include <omp.h>
#include <stdio.h>
#include <stdlib.h>

#define NRA 62
#define NCA 15
#define NCB 7

int main(int argc, char *argv[])
{
    int tid, nthreads, i, j, k, chunk;
    double a[NRA][NCA], b[NCA][NCB], c[NRA][NCB];

    chunk = 10;

    #pragma omp parallel shared(a, b, c, nthreads, chunk) private(tid, i, j, k)
    {
        tid = omp_get_thread_num();
        if (tid == 0)
        {
            nthreads = omp_get_num_threads();
            printf("Starting matrix multiple example with %d threads\n", nthreads);
            printf("Initializing matrices...\n");
        }

        #pragma omp for schedule(static, chunk)
        for (i = 0; i < NRA; i++)
            for (j = 0; j < NCA; j++)
                a[i][j] = i + j;

        #pragma omp for schedule(static, chunk)
        for (i = 0; i < NCA; i++)
            for (j = 0; j < NCB; j++)
                b[i][j] = i * j;

        #pragma omp for schedule(static, chunk)
        for (i = 0; i < NRA; i++)
            for (j = 0; j < NCB; j++)
                c[i][j] = 0;

        printf("Thread %d starting matrix multiply...\n", tid);

        #pragma omp for schedule(static, chunk)
        for (i = 0; i < NRA; i++)
        {
            printf("Thread=%d did row=%d\n", tid, i);
            for (j = 0; j < NCB; j++)
                for (k = 0; k < NCA; k++)
                    c[i][j] += a[i][k] * b[k][j];
        }
    }

    printf("******************************************************\n");
    printf("Result Matrix:\n");

    for (i = 0; i < NRA; i++)
    {
        for (j = 0; j < NCB; j++)
            printf("%6.2f ", c[i][j]);
        printf("\n");
    }

    printf("******************************************************\n");
    printf("Done.\n");

    return 0;
}
--------------------------------------
#include <omp.h>
#include <stdio.h>

int a, b, i, tid;
float x;
#pragma omp threadprivate(a, x)

int main()
{
    omp_set_dynamic(0);

    printf("1st Parallel Region:\n");
    #pragma omp parallel private(b, tid)
    {
        tid = omp_get_thread_num();
        a = tid;
        b = tid;
        x = 1.1f * tid + 1.0f;
        printf("Thread %d: a,b,x= %d %d %f\n", tid, a, b, x);
    }

    printf("************************************\n");
    printf("Master thread doing serial work here\n");
    printf("************************************\n");

    printf("2nd Parallel Region:\n");
    #pragma omp parallel private(tid)
    {
        tid = omp_get_thread_num();
        printf("Thread %d: a,b,x= %d %d %f\n", tid, a, b, x);
    }

    return 0;
}
--------------------------------
#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
#include <omp.h>

long long factorial(long n)
{
    long long i, out;
    out = 1;
    for (i = 1; i < n + 1; i++) out *= i;
    return out;
}

int main(int argc, char **argv)
{
    int i, j, threads;
    long long *x;
    long long n = 12;

    if (argc > 1)
    {
        threads = atoi(argv[1]);
        if (omp_get_dynamic())
        {
            omp_set_dynamic(0);
            printf("called omp_set_dynamic(0)\n");
        }
        omp_set_num_threads(threads);
    }

    printf("%d threads\n", omp_get_max_threads());

    x = (long long *) malloc(n * sizeof(long long));

    for (i = 0; i < n; i++) x[i] = factorial(i);

    j = 0;

    #pragma omp parallel for firstprivate(x, j)
    for (i = 1; i < n; i++)
    {
        j += i;
        x[i] = j * x[i - 1];
    }

    for (i = 0; i < n; i++)
        printf("factorial(%2d)=%14lld x[%2d]=%14lld\n", i, factorial(i), i, x[i]);

    free(x);

    return 0;
}
---------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define N 100000000
#define TRUE 1
#define FALSE 0

int main(int argc, char **argv)
{
    int *a;
    int i, k, threads, pcount;
    double t1, t2;
    int found;

    if (argc > 1)
    {
        threads = atoi(argv[1]);
        if (omp_get_dynamic())
        {
            omp_set_dynamic(0);
            printf("called omp_set_dynamic(0)\n");
        }
        omp_set_num_threads(threads);
    }

    printf("%d threads max\n", omp_get_max_threads());

    a = (int *)malloc((N + 1) * sizeof(int));

    for (i = 2; i <= N; i++) a[i] = 1;

    k = 2;
    t1 = omp_get_wtime();

    #pragma omp parallel firstprivate(k) private(i, found)
    while (k * k <= N)
    {
        #pragma omp for
        for (i = k * k; i <= N; i += k) a[i] = 0;

        found = FALSE;
        for (i = k + 1; !found; i++)
        {
            if (a[i])
            {
                k = i;
                found = TRUE;
            }
        }
    }

    t2 = omp_get_wtime();

    printf("%.2f seconds\n", t2 - t1);

    pcount = 0;
    for (i = 2; i <= N; i++)
    {
        if (a[i])
        {
            pcount++;
        }
    }
    printf("%d primes between 0 and %d\n", pcount, N);

    free(a);

    return 0;
}

